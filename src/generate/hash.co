crypto = require \crypto

# cockatrice and mws share the same basic hashing algorithm:
# for each card, transform the name, and add a prefix if it is in the side
# repeat this string for each copy of the card
# sort the strings, then join them with a separator
# hash the joined string, then transform the digest

opts =
  cock:
    algo: \sha1
    separator: \;
    sidePrefix: \SB:
    transformName: -> it.toLowerCase!
    #transform 10 digits of base 16 into 8 digits of base 32
    transformDigest: -> parseInt(it.slice(0 10), 16)toString 32
  mws:
    algo: \md5
    separator: ''
    sidePrefix: \#
    transformName: -> it.toUpperCase!replace /[^A-Z]/g ''
    transformDigest: -> it.slice 0 8

hash = (deck, opts) ->
  arr = for zone, cards in deck
    prefix = if zone is \side then opts.sidePrefix else ''
    for card, n in cards
      s = prefix + opts.transformName card
      while n--
        s
  data = arr.sort!join opts.separator
  hash = crypto.createHash opts.algo .update data, \utf8
  digest = hash.digest \hex
  opts.transformDigest digest

module.exports = (deck) ->
  cock: hash deck, opts.cock
  mws:  hash deck, opts.mws
