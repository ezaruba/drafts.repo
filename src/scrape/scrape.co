#!/usr/bin/env coco

fs = require \fs
_ = require \../_
getCards = require \./cards
getSetNames = require \./setNames

TS  = 'Time Spiral'
TST = 'Time Spiral "Timeshifted"'

Cards = {}
Sets  = {}

getSetNames (setNames) ->
  regex = /Box Set|Duel Deck|From the Vault|Masters Edition|Premium Deck|Promo set|Vanguard|Planechase|Archenemy|Commander/
  setNames = for setName of setNames
    unless regex.test setName
      setName

  do scrape = ->
    unless setName = setNames.pop!
      write!
      return

    console.log setName

    cards <- getCards setName

    set = Sets[setName] =
      common: []
      uncommon: []
      rare: []
      mythic: []
      special: []

    if setName is TST
      setName := TS

    for card of cards
      {name, rarity} = card
      continue if rarity is \land

      set[rarity]push name

      if not Cards[name]
        Cards[name] = card
        card.score = 99
        card.urls = {}
      Cards[name]urls[setName] =
        "http://gatherer.wizards.com/Handlers/Image.ashx
        ?type=card&multiverseid=#{delete card.id}"

    for rarity of <[ mythic special ]>
      unless set[rarity]length
        delete set[rarity]

    scrape!

replace = (setName, rarity, bad) ->
  # WTF
  good = bad.match /\((.+)\)/ .1
  names = Sets[setName][rarity]
  index = names.indexOf bad

  if index is -1
    console.log "#good in #setName doesn't need fixing"
    return

  names[index] = good
  if card = delete Cards[bad]
    Cards[good] = card
    card.name = good

write = ->
  # http://wiki.mtgsalvation.com/article/Booster_pack
  #
  # from 7th edition / shards, 1 common was replaced by 1 land card
  # time spiral block is special
  #
  # http://en.wikipedia.org/wiki/List_of_Magic:_The_Gathering_sets
  largeSets =
    'Fourth Edition'
    'Fifth Edition'
    'Classic Sixth Edition'
    'Portal'
    'Portal Second Age'
    'Portal Three Kingdoms'
    'Starter 1999'
    'Starter 2000'
    'Unglued'
    'Unhinged'
    'Mirage'
    'Visions'
    'Weatherlight'
    'Tempest'
    'Stronghold'
    'Exodus'
    "Urza's Saga"
    "Urza's Legacy"
    "Urza's Destiny"
    'Mercadian Masques'
    'Nemesis'
    'Prophecy'
    'Invasion'
    'Planeshift'
    'Apocalypse'
    'Odyssey'
    'Torment'
    'Judgment'
    'Onslaught'
    'Legions'
    'Scourge'
    'Mirrodin'
    'Darksteel'
    'Fifth Dawn'
    'Champions of Kamigawa'
    'Betrayers of Kamigawa'
    'Saviors of Kamigawa'
    'Ravnica: City of Guilds'
    'Guildpact'
    'Dissension'
    'Coldsnap'
    'Planar Chaos'
    'Future Sight'
    'Lorwyn'
    'Morningtide'
    'Shadowmoor'
    'Eventide'
  for set of largeSets
    Sets[set].size = 11

  dgm = Sets["Dragon's Maze"]
  dgm.special =
    gate:
      'Azorius Guildgate'
      'Boros Guildgate'
      'Dimir Guildgate',
      'Golgari Guildgate'
      'Gruul Guildgate'
      'Izzet Guildgate'
      'Orzhov Guildgate'
      'Rakdos Guildgate'
      'Selesnya Guildgate'
      'Simic Guildgate'
    shock:
      'Blood Crypt'
      'Breeding Pool'
      'Godless Shrine'
      'Hallowed Fountain'
      'Overgrown Tomb'
      'Sacred Foundry'
      'Steam Vents'
      'Stomping Ground'
      'Temple Garden'
      'Watery Grave'
      "Maze's End"
  # filter guildgates
  dgm.common = _.without <>, dgm.special.gate
  dgm.mythic = _.without <>, "Maze's End"

  # filter transformed
  for setName of ['Innistrad', 'Dark Ascension']
    for rarity in set = Sets[setName]
      set[rarity] = for name of set[rarity]
        card = Cards[name]
        if card.cost or card.type is \land
          name

  for card, i of unc = Sets.Unglued.uncommon
    if /token card/.test card
      unc.splice i--, 1
      delete Cards[card]

  Sets[TS]special = Sets[TST]special
  delete Sets[TST]

  replace TS, \special 'XXCall of the Herd (Call of the Herd)'
  replace TS, \special 'XXValor (Valor)'

  if not fs.existsSync \data
    fs.mkdirSync \data
  fs.writeFileSync \data/cards.json JSON.stringify Cards, null 2
  fs.writeFileSync \data/sets.json  JSON.stringify Sets,  null 2

  console.log \done
